searchState.loadedDescShard("metrics_util", 0, "Helper types and functions used within the metrics …\nAll metric kinds.\nA lock-free bucket with snapshot capabilities.\nThe counter kind.\nA composite key that stores both the metric key and the …\nCounter type.\nA wrapper type that provides <code>Hashable</code> for any type that is …\nThe gauge kind.\nGauge type.\nThe histogram kind.\nA type that can hash itself.\nThe hasher implementation used internally.\nA bucketed histogram.\nHistogram type.\nMetric kind.\nMetric kind mask.\nNo metric kinds.\nA quantile that has both the raw value and a …\nWraps a recorder to allow for recovering it after being …\nA quantile sketch with relative-error guarantees.\nAdds a sample to the summary.\nGets the buckets.\nClears the bucket.\nClears the bucket, invoking <code>f</code> for every block that will be …\nGets the sample count.\nGets the number of samples in this summary.\nCollects all of the elements written to the bucket.\nIterates all of the elements written to the bucket, …\nGets the estimized size of this summary, in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>RecoverableRecorder</code>, wrapping the given …\nGenerate the hash of this object.\nGenerate the hash of this object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this wrapper, returning the original recorder.\nTakes the individual pieces of this <code>CompositeKey</code>.\nChecks whether or not this bucket is empty.\nWhether or not this summary is empty.\nGets the inner key represented by this <code>CompositeKey</code>.\nGets the inner kind represented by this <code>CompositeKey</code>.\nGets the human-friendly display label.\nLayers are composable helpers that can be “layered” on …\nWhether or not this metric kind contains the specified …\nGets the maximum value this summary has seen so far.\nMerge another Summary into this one.\nGets the minimum value this summary has seen so far.\nCreates a new, empty bucket.\nCreates a new <code>Quantile</code> from a floating-point value.\nCreates a new <code>CompositeKey</code>.\nCreates a new <code>Histogram</code>.\nCreates a new <code>Summary</code>.\nParses a slice of floating-point values into a vector of …\nPushes an element into the bucket.\nGets the estimated value at the given quantile.\nRecords a single sample.\nRecords multiple samples.\nHigh-performance metrics storage.\nGets the sum of all samples.\nGets the raw quantile value.\nCreates a new <code>Summary</code> with default values.\nFans out metrics to multiple recorders.\nA layer for fanning out metrics to multiple recorders.\nDecorates an object by wrapping it within another type.\nThe output type after wrapping.\nApplies a prefix to every metric key.\nA layer for applying a prefix to every metric key.\nBuilder for composing layers together in a …\nAdds a recorder to the fanout list.\nBuilds the <code>Fanout</code> layer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstalls this stack as the global recorder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps <code>inner</code> based on this layer.\nCreates a new <code>PrefixLayer</code> based on the given prefix.\nCreates a new <code>Stack</code> around the given object.\nPushes the given layer on to the stack, wrapping the …\nAtomic metric storage.\nThe type used for counters.\nThe type used for gauges.\nThe generation of a metric.\nGeneration tracking for a metric.\nGenerational atomic metric storage.\nGenerational metric storage.\nThe type used for histograms.\nTracks recency of metric updates by their registry …\nA high-performance metric registry.\nDefines the underlying storage for metrics as well as how …\nCreates a <code>GenerationalStorage</code> that uses <code>AtomicStorage</code> as …\nCreates a <code>GenerationalStorage</code> that uses <code>AtomicStorage</code> as …\nCreates a new <code>Registry</code> using a regular <code>Key</code> and atomic …\nRemoves all metrics from the registry.\nCreates an empty counter.\nDeletes a counter from the registry.\nDeletes a gauge from the registry.\nDeletes a histogram from the registry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an empty gauge.\nGets a map of all present counters, mapped by key.\nGets a map of all present gauges, mapped by key.\nGets the current generation.\nGets a map of all present histograms, mapped by key.\nGets a reference to the inner value.\nGets or creates the given counter.\nGets or creates the given gauge.\nGets or creates the given histogram.\nCreates an empty histogram.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>GenerationalStorage</code>.\nCreates a new <code>Recency</code>.\nCreates a new <code>Registry</code>.\nChecks if the given counter should be stored, based on its …\nChecks if the given gauge should be stored, based on its …\nChecks if the given histogram should be stored, based on …\nVisits every counter stored in this registry.\nVisits every gauge stored in this registry.\nVisits every histogram stored in this registry.\nAcquires a reference to the inner value, and increments …")