searchState.loadedDescShard("metrics", 0, "A lightweight metrics facade.\nSets the value of the gauge to this value.\nBits per second.\nBytes.\nCount.\nCount per second.\nA counter.\nA counter handler.\nDecrements the value of the gauge by this much.\nA gauge.\nA gauge handler.\nValue of a gauge operation.\nGigabits per second.\nGigibytes.\nA histogram.\nA histogram handler.\nIncrements the value of the gauge by this much.\nAn object which can be converted into a <code>f64</code> representation.\nA value that can be converted to a vector of <code>Label</code>s.\nA metric identifier.\nKey-specific hashing algorithm.\nName component of a key.\nKibibytes.\nKilobits per second.\nMetadata for a metric key in the form of a key/value pair.\nMebibytes.\nMegabits per second.\nMicroseconds.\nMilliseconds.\nNanoseconds.\nA no-op recorder.\nPercentage.\nA trait for registering and recording metrics.\nSeconds.\nThe type returned by <code>set_recorder</code> if <code>set_recorder</code> has …\nAn allocation-optimized string.\nTebibytes.\nTerabits per second.\nUnits for a given metric.\nSets the counter to at least the given amount.\nSets the counter to an absolute value.\nSets a counter to an absolute value.\nGets the canonical string label for the given unit.\nGets the string form of this <code>Unit</code>.\nGets a reference to the strin used for this name.\nAtomic types used for metrics.\nIncrements a counter.\nDecrements the gauge by the given amount.\nDecrements the gauge.\nDecrements a gauge.\nDescribes a counter.\nDescribes a counter.\nDescribes a gauge.\nDescribes a gauge.\nDescribes a histogram.\nDescribes a histogram.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Counter</code> based on a shared handler.\nCreates a <code>Gauge</code> based on a shared handler.\nCreates a <code>Histogram</code> based on a shared handler.\nCreates a <code>KeyName</code> from a static string.\nCreates a <code>Key</code> from a name.\nCreates a <code>Key</code> from a name and set of labels.\nCreates a <code>Key</code> from a non-static name and a static set of …\nCreates a <code>Key</code> from a static name.\nCreates a <code>Key</code> from a static name and static set of labels.\nCreates a <code>Label</code> from a static key and value.\nConverts the string representation of a unit back into <code>Unit</code>…\nUpdates a gauge.\nGets the hash value for this key.\nRecords a histogram.\nIncrements the counter by the given amount.\nIncrements the gauge by the given amount.\nIncrements the counter.\nIncrements the gauge.\nIncrements a counter by one.\nIncrements a gauge.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this object to its <code>f64</code> representation.\nConsumes this value, turning it into a vector of <code>Label</code>s.\nConsumes this <code>Key</code>, returning the name parts and any labels.\nConsumes this <code>Label</code>, returning the key and value.\nWhether or not this unit relates to the measurement of …\nWhether or not this unit relates to the measurement of …\nWhether or not this unit relates to the measurement of …\nKey of this label.\nLabels of this key, if they exist.\nName of this key.\nCreates a <code>Label</code> from a key and value.\nCreates a no-op <code>Counter</code> which does nothing.\nCreates a no-op <code>Gauge</code> which does nothing.\nCreates a no-op <code>Histogram</code> which does nothing.\nRecords a value into the histogram.\nRecords a value in the histogram.\nReturns a reference to the recorder.\nRegisters a counter.\nRegisters a counter.\nRegisters a gauge.\nRegisters a gauge.\nRegisters a histogram.\nRegisters a histogram.\nSets the gauge to the given amount.\nSets the gauge.\nSets the global recorder to a <code>Box&lt;Recorder&gt;</code>.\nSets the global recorder to a <code>&amp;&#39;static Recorder</code>.\nReturns a reference to the recorder.\nUpdates an input value based on this gauge value.\nValue of this label.\nClones this <code>Key</code>, and expands the existing set of labels.\nAn integer type which can be safely shared between threads.\nReturns a mutable pointer to the underlying integer.\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nAdds to the current value, returning the previous value.\nBitwise “and” with the current value.\nMaximum with the current value.\nMinimum with the current value.\nBitwise “nand” with the current value.\nBitwise “or” with the current value.\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nBitwise “xor” with the current value.\nReturns the argument unchanged.\nConverts an <code>u64</code> into an <code>AtomicU64</code>.\nGet atomic access to a <code>&amp;mut u64</code>.\nGet atomic access to a <code>&amp;mut [u64]</code> slice.\nCreates a new reference to an atomic integer from a …\nReturns a mutable reference to the underlying integer.\nGet non-atomic access to a <code>&amp;mut [AtomicU64]</code> slice\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nLoads a value from the atomic integer.\nCreates a new atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer, returning the …\nFetches the value, and applies a function to it that …\nFetches the value, applies a function to it that it return …")