searchState.loadedDescShard("plotters", 0, "Plotters - A Rust drawing library focusing on data …\nThis module contains some useful re-export of backend …\nThe high-level plotting abstractions.\nOne of the key features of Plotters is flexible coordinate …\nThe data processing module, which implements algorithms …\nDefines and names a color based on its R, G, B, A values.\nMacro for allowing dynamic creation of doc attributes.\nThe drawing utils for Plotters. In Plotters, we have two …\nDefines the drawing elements, the high-level drawing unit …\nThe module imports the most commonly used types and …\nThis module contains predefined types of series. The …\nThe style for shapes and text, font, color, etc.\nThe drawing backend trait, which implements the low-level …\nThe error type reported by the backend\nThe SVG image drawing backend\nDraw a pixel on the drawing backend\nEnsure the backend is ready to draw\nGet the dimension of the drawing backend in pixels\nFinalize the drawing step and present all the changes. …\nBottom of the figure\nThe helper object to create a chart context, which is used …\nThe context of the chart. This is the core object of …\nA chart context state - This is the data that is needed to …\nPlaces the series label at the specific location in …\nThe chart context that has two coordinate system attached. …\nThe chart state for a dual coord chart, see the detailed …\nSpecifies one of the four label positions around the …\nLeft side of the figure\nPlaces the series label at the lower left\nPlaces the series label at the lower middle\nPlaces the series label at the lower right\nThe struct that is used for tracking the configuration of …\nPlaces the series label at the middle left\nPlaces the series label at the middle middle\nPlaces the series label at the middle right\nRight side of the figure\nThe style used to describe the mesh and axis for a …\nThe annotations (such as the label of the series, the …\nUseful to specify the position of the series label.\nThe struct to specify the series label of a target chart …\nTop of the figure\nPlaces the series label at the upper left\nPlaces the series label at the upper middle\nPlaces the series label at the upper right\nCast the reference to a chart context to a reference to …\nSet the axis description’s style. If not given, use …\nSet the axis description’s style. If not given, use …\nSet the style definition for the axis\nSet the style definition for the axis\nMaps the coordinate to the backend coordinate. This is …\nSets the background style of the label series area.\nSet the style for the coarse grind grid\nSets the style of the label series area.\nBorrow a mutable reference to the chart context that uses …\nBuilds a chart with a 2D Cartesian coordinate system.\nBuilds a chart with a 3D Cartesian coordinate system.\nThis function has been renamed to …\nSets the title or caption of the chart.\nCreate an axis configuration object, to set line styles, …\nInitialize a mesh configuration object and mesh drawing …\nStart configure the style for the secondary axes\nConfigure the styles for drawing series labels in the chart\nDisable drawing all axes\nDisable drawing all meshes\nDisable drawing the X axis\nDisable the mesh for the x axis.\nDisable drawing the Y axis\nDisable the mesh for the y axis\nDraw the axes for the secondary coordinate system\nDraw the configured mesh on the target plot\nDraws the series label area.\nDraw a series use the secondary coordinate system.\nDraws a data series. A data series in Plotters is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a chart context into a chart state, by doing so, …\nConvert the chart context into a chart state, similar to …\nConvert the chart context into an closure that can be used …\nConvert the chart context into a pair of closures that …\nConvert the chart context into the secondary coordinate …\nConvert the chart context into a sharable chart state. …\nConvert the chart context into a sharable chart state.\nSets the series label for the current series.\nSets the font for series labels.\nSet the label style for the secondary axis\nSet the style of the label text\nSets the legend element creator function.\nSets the size of the legend area.\nSet the style for the fine grind grid\nSets the size of the four margins of the chart.\nSets the margin of the series label drawing area.\nSets the size of the bottom margin of the chart.\nSets the size of the left margin of the chart.\nSets the size of the right margin of the chart.\nSets the size of the top margin of the chart.\nSet the maximum number of divisions for the minor grid\nCreate a chart builder on the given drawing area\nGet a reference of underlying plotting area\nSets the series label positioning style\nRestore the chart state on the given drawing area\nRestore the chart context on the given drawing area\nSets the size of the Y label area to the right of the …\nGet a reference to the drawing area that uses the …\nSets the 3d coordinate pixel range.\nSets the size of the four label areas of the chart.\nSet all the tick marks to the same size <code>value</code>: The new size\nSet all the tick mark to the same size <code>value</code>: The new size\nSets the size of a chart label area.\nSets the size of the left and bottom label areas of the …\nConvert this chart context into a dual axis chart context …\nSets the tick mark size for a given label area position. …\nSet the tick mark size on the axes. When this is set to …\nMake the chart context, do not consume the chart context …\nCopy the coordinate specs and make a chart state\nSets the size of the X label area at the top of the chart.\nOverride the 3D projection matrix. This function allows to …\nSet the X axis’s description\nSet the X axis’s description\nSets the size of the X label area at the bottom of the …\nSet the formatter function for the X label text\nSet the formatter function for the X label text\nThe offset of x labels. This is used when we want to place …\nThe offset of x labels. This is used when we want to place …\nSet the style of the label X axis text\nSet how many labels for the X axis at most\nSet how many labels for the X axis at most\nSet the maximum number of divisions for the minor grid\nGet the range of X axis\nSet the Y axis’s description\nSet the Y axis’s description\nSets the size of the Y label area to the left of the chart.\nSet the formatter function for the Y label text\nSet the formatter function for the Y label text\nThe offset of y labels. This is used when we want to place …\nThe offset of y labels. This is used when we want to place …\nSet the style of the label Y axis text\nSet how many label for the Y axis at most\nSet how many label for the Y axis at most\nSet the maximum number of divisions for the minor grid\nGet range of the Y axis\nThe trait that translates some customized object to the …\nSpecifies the object to be translated from\nThe trait indicates that the coordinate system supports …\nThe coordinate translation that only impose shift\nGroups Cartesian ranged coordinates in 2d and 3d.\nThe coordinate combinators\nGet the Z-value of current coordinate\nGet the Z-value of current coordinate\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe one-dimensional coordinate system abstraction.\nRanged coordinates in 3d.\nReverse translate the coordinate from the drawing …\nTranslate the guest coordinate to the guest coordinate\nThe primitive types supported by Plotters coordinate system\nA 2D Cartesian coordinate system described by two 1D …\nRepresent a coordinate mesh for the two ranged value …\nUsed to plot the horizontal lines of the mesh\nUsed to plot the vertical lines of the mesh\nDraw a single mesh line onto the backend\nDraw the mesh for the coordinate system\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the horizental backend coordinate range where X axis …\nGet the range of X axis\nGet the vertical backend coordinate range where Y axis …\nGet the range of Y axis\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new 2D cartesian coordinate system\nGet the 1D coordinate spec for X axis\nGet the 1D coordinate spec for Y axis\nBind an existing coordinate spec with a given key points …\nBind a existing coordinate spec with a given key points …\nUsed to build a nested coordinate system.\nCategory value\nGrouping the value in the coordinate specification.\nMakes a linspace coordinate from the ranged coordinates.\nConvert a range to a log scale coordinate spec\nThe trait for the types that can be converted into a …\nThe coordinate combinator that transform a continuous …\nA log scaled coordinate axis\nThe logarithmic coordinate decorator. This decorator is …\nThe trait for the type that is able to be presented in the …\nA nested coordinate spec which is a discrete coordinate on …\nDescribe a value for a nested coordinate\nThe trait that provides method <code>Self::group_by</code> function …\nOne exact nested value\nThe type of the value\nThe coordinate decorator that allows customized keypoint …\nThe coordinate decorator that binds a key point vector. …\nMake the conversion from the type to the floating point …\nGet a reference to the bold points\nGet a mut reference to the bold points\nGet the category of current nest value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a floating point number to the scale\nMake a grouping ranged value, see the documentation for …\nMake a grouping ranged value, see the documentation for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a reference to light key points\nGet a mut reference to the light key points\nMake the log scale coordinate\nMake a partial axis based on the percentage of visible …\nBuilds a nested coordinate system.\nBuilds a nested coordinate system.\nGet the nested value from this value\nMake the partial axis\nMake the partial axis\nSet the step value, make a linspace coordinate from the …\nSet the step value, make a linspace coordinate from the …\nSet the linspace use the round up method for value matching\nSet the linspace use the exact match method for value …\nSet the linspace use the round down method for value …\nSet the linspace use the best match method for value …\nBind a existing coordinate spec with a given key points …\nBind a existing coordinate spec with a given key points …\nBind a existing coordinate spec with a given key points …\nBind a existing coordinate spec with a given key points …\nDefine the light key point algorithm, by default this …\nSpecify the light key points, which is used to render the …\nAllows any key points\nThe trait for the type that can be converted into a ranged …\nAllows only bold key points\nThe key point hint indicates we only need key point for …\nMeans we are referring the center of position <code>T</code> and the …\nType to describe a coordinate system\nThis makes the ranged coord uses the default <code>Debug</code> based …\nSince stable Rust doesn’t have specialization, it’s …\nThe trait indicates the coordinate is discrete This means …\nMeans we are referring the exact position of value <code>T</code>\nThis marker decides if Plotters default ValueFormatter …\nThe trait for types that can decorated by SegmentedCoord …\nThe trait for a hint provided to the key point algorithm …\nSpecify the weight of key points.\nReferring the last dummy element\nThe key point hint indicates that we are using the key …\nThis markers prevent Plotters to implement the default …\nThe trait that indicates we have a ordered and ranged value\nThe trait indicates the ranged value can be map reversely, …\nThe value that used by the segmented coordinate.\nA <code>SegmentedCoord</code> is a decorator on any discrete coordinate …\nType for values in the given coordinate system\nDetermine how we can format a value in a coordinate system …\nThe type of this value in this range specification\nCheck if this key point weight setting allows light point\nThis function provides the on-axis part of its range\nReturns the point number constraint for the bold points\nFormat the value\nDetermine how we can format a value in a coordinate system …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReverse map the index to the value\nMap a value to the index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert current ranged value into a segmented coordinate\nConvert current ranged value into a segmented coordinate\nThis function gives the key points that we can draw a grid …\nThis function maps the value to i32, which is the drawing …\nReturns the max number of key points\nCreate a new light key point hind\nReturns the next value in this range\nReturns the next value in this range\nReturns the previous value in this range\nReturns the previous value in this range\nGet the range of this value\nGet the number of element in the range Note: we assume …\nPerform the reverse mapping\nReturn a iterator that iterates over the all possible …\nReturn a iterator that iterates over the all possible …\nReturns the weight for this hint\nA 3D cartesian coordinate system\nThe projection matrix which is used to project the 3D …\nThe helper struct to build a projection matrix\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild the matrix based on the configuration\nDo not project, only transform the guest coordinate system\nCreates a new, default projection matrix builder object.\nCreate a new coordinate\nNormalize the matrix, this will make the metric unit to 1\nReturns the identity matrix\nSpecifies the pitch of the 3D coordinate system\nGet the distance of the point in guest coordinate from the …\nGet the depth of the projection\nGet the projection matrix\nReturns the matrix which rotates the coordinate\nReturns the matrix that applies a scale factor\nSpecifies the scale of the 3D coordinate system\nSets the pixel sizes and projections according to the …\nSet the pivot point, which means the 3D coordinate “…\nSet the projection matrix\nReturns the matrix which shift the coordinate\nCreates a Cartesian3d object with the given projection.\nSpecifies the yaw of the 3D coordinate system\nReturns the zero maxtrix\nThe ranged coordinate for type f32\nThe ranged coordinate for type f64\nThe ranged coordinate for type i128\nThe ranged coordinate for type i32\nThe ranged coordinate for type i64\nThe ranged coordinate for type isize\nThe ranged coordinate for type u128\nThe ranged coordinate for type u32\nThe ranged coordinate for type u64\nThe ranged coordinate for type usize\nA range that is defined by a slice of values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe quartiles\nBuild a range that fits the data\nHandles the printing of floating-point numbers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the quartiles median.\nCreate a new quartiles struct with the values calculated …\nGet the quartiles values.\nHandles printing of floating point numbers\nWhether scientific notation is allowed\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum allowed number of decimal digits\nMinimum allowed number of decimal digits\nThe function that pretty prints the floating number Since …\nHandles printing of floating point numbers\nThe error is due to drawing backend failure\nThe abstraction of a drawing area. Plotters uses drawing …\nThe error description of any drawing area API\nThis is the dummy backend placeholder for the backend that …\nA type which can be converted into a root drawing area\nThe error caused by invalid layout\nThe representation of the rectangle in backend canvas\nWe are not able to get the mutable reference of the …\nApply a new coord transformation object and returns a new …\nReturns the coordinates by reference\nReturns the coordinates by mutable reference\nGet the area dimension in pixel\nDraw an high-level element\nDraw the mesh on a area\nDraw a single pixel\nDraw text on the drawing area\nEstimate the dimension of the text if drawn on this …\nFill the entire drawing area with a color\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the left upper conner of this area in the drawing …\nGet the pixel range of this area\nGet the range of X of the backend coordinate for current …\nGet the range of X of the guest coordinate for current …\nGet the range of Y of the backend coordinate for current …\nGet the range of Y of the guest coordinate for current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the coordinates by value\nConvert the type into a root drawing area\nMap coordinate to the backend coordinate\nCreate a margin for the given drawing area and returns the …\nPresent all the pending changes to the backend\nCompute the relative size based on the drawing area’s …\nCompute the relative size based on the drawing area’s …\nShrink the region, note all the locations are in guest …\nSplit the drawing area into a grid with specified …\nSplit the drawing area evenly\nSplit the drawing area horizontally\nSplit the drawing area vertically\nStrip the applied coordinate specification and returns a …\nDraw a title of the drawing area and return the remaining …\nMake the coordinate in the range of the rectangle\nStrip the applied coordinate specification and returns a …\nUsed for 3d coordinate transformations.\nUsed for 2d coordinate transformations.\nA circle element\nA container for two drawable elements, used for …\nUseful to translate from guest coordinates to backend …\nA cross marker for visualizing data series.\nRepresents a cuboid, a six-faced solid.\nAn element of a series of connected lines in dash style.\nAn element of a series of connected lines in dot style for …\nThe trait indicates we are able to draw it on a drawing …\nThe container for a dynamically dispatched element\nAn empty composable element. This is the starting point of …\nThe trait that makes the conversion from the statically …\nThe point iterator\nAn multi-line text element. The <code>Text</code> element allows only …\nSpecifies the output data from the translation\nThis is a deprecated type. Please use new name <code>PathElement</code> …\nAn element of a series of connected lines\nA Pie Graph\nAn element representing a single pixel.\nThe item in point iterator\nA type which is logically a collection of points, under …\nA common trait for elements that can be interpreted as …\nAn element of a filled polygon\nA rectangle element\nA single line text element. This can be owned or borrowed …\nA triangle marker for visualizing data series.\nAn empty composable element. This is the starting point of …\nCompute the line layout\nEnables creating a donut chart with a hole of the …\nActually draws the element. The key points is already …\nEstimate the multi-line text element’s dimension\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a multi-line text into an multi-line element.\nParse a multi-line text into an multi-line element.\nGet the points of the rectangle\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake the conversion\nSets the offset to labels, to distanciate them …\nSet the label style.\nPoint creator.\nPerforms the translation from guest coordinates to backend …\nCreates a new pixel.\nCreate a new path\nCreate a new path\nCreate a new path\nCreate a new path\nCreate a new circle element\nCreate a new polygon\nCreates a cuboid.\nCreate a new text element\nCreate an empty multi-line text element. Lines can be …\nCreates a cross marker.\nCreates a triangle marker.\nBuild a Pie object. Assumes a start angle at 0.0, which is …\nenables drawing the wedge’s percentage in the middle of …\nframework to do the coordinate mapping\nPush a new line into the given multi-line text <code>line</code>: The …\nMove the location to the specified location\nSet the line height of the multi-line text element\nSet the margin of the rectangle\nSet the style of the rectangle\nPass an angle in degrees to change the default. Default is …\nThe bold style\nThe type used to returns a drawing operation that can be …\nThe drawing backend trait, which implements the low-level …\nContains the error value\nThe error type reported by the backend\nDescribes font family. This can be either a specific font …\nDescribes the font style. Such as Italic, Oblique, etc.\nSpecifying text transformations\nThe italic style\nThe system default monospace font\nA specific font family name\nNothing to transform\nThe normal style\nThe oblique style\nContains the success value\nRotating the text 180 degree clockwise\nRotating the text 270 degree clockwise\nRotating the text 90 degree clockwise\nThe SVG image drawing backend\nThe system default sans-serif font family\nThe system default serif font family\nBlit a bitmap on to the backend.\nBlit a bitmap on to the backend.\nDraw a circle on the drawing backend\nDraw a circle on the drawing backend\nDraw a line on the drawing backend\nDraw a line on the drawing backend\nDraw a path on the drawing backend\nDraw a path on the drawing backend\nDraw a pixel on the drawing backend\nDraw a rectangle on the drawing backend\nDraw a rectangle on the drawing backend\nDraw a text on the drawing backend\nDraw a text on the drawing backend\nEnsure the backend is ready to draw\nEstimate the size of the horizontal text if rendered on …\nEstimate the size of the horizontal text if rendered on …\nReturns the argument unchanged.\nGet the dimension of the drawing backend in pixels\nCalls <code>U::from(self)</code>.\nCreate a new SVG drawing backend\nFinalize the drawing step and present all the changes. …\nCreate a new SVG drawing backend and store the document …\nAn area series is similar to a line series but uses a …\nA dashed line series, map an iterable object to the dashed …\nA dotted line series, map an iterable object to the dotted …\nThe line series object, which takes an iterator of data …\nSets the border style of the area series.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an area series with transparent border.\nCreates a new line series based on a data iterator and a …\nCreate a new line series from\nCreate a new line series from\nSets the size of the points in the series, in pixels.\nAllows a value turns into a relative size\nThe bold style\nArray of colors\nAny color representation\nContains the error value\nDescribes a font\nThe error type for the font implementation\nDescribes font family. This can be either a specific font …\nThe type we used to represent a result of any font …\nDescribes the font style. Such as Italic, Oblique, etc.\nSpecifying text transformations\nThe color described by HSL color space\nPercentage height\nThe trait that allows some type turns into a font …\nTrait for values that can be converted into <code>TextStyle</code> …\nThe italic style\nRepresents a box where a text label can be fit\nThe system default monospace font\nA specific font family name\nNothing to transform\nThe normal style\nThe oblique style\nContains the success value\nDefinitions of palettes of accessibility Represents a …\nDefinitions of palettes of accessibility The palette of …\nDefinitions of palettes of accessibility The palette of …\nDefinitions of palettes of accessibility The palette of …\nA color in the given palette\nThe RGBA representation of the color, Plotters use RGBA as …\nThe color described by its RGB value\nDescribes a relative size, might be 1. portion of height …\nRotating the text 180 degree clockwise\nRotating the text 270 degree clockwise\nRotating the text 90 degree clockwise\nThe system default sans-serif font family\nThe system default serif font family\nStyle for any shape\nThe trait that describes a size, it may be a relative size …\nPercentage of either height or width, which is smaller\nStyle of a text\nPercentage width\nGet the alpha channel of the color\nGet the alpha channel of the color\nMake a CSS compatible string for the font family name. …\nConvert the font style into a CSS compatible string which …\nGet the size of the text if rendered in this font. This is …\nReturns a new text style object with the specified <code>color</code>.\nReturns the color as interpreted by the backend.\nSets the color of the style.\nSpecification of the color.\nThe text color\nBasic predefined colors.\nActually draws a font with a drawing function\nMake a filled style form the color\nMake a filled style form the color\nReturns a filled style with the same color and stroke …\nWhether the style is filled with color.\nThe font description\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the font family\nGet the name of the font\nGet the size of font\nGet the name of the style\nGet the font transformation description\nConvert the size into the number of pixels\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake the font description from the source type\nConverts the value into a TextStyle value.\nGet the size of the text if rendered in this font\nSet the upper bound of the relative size\nSet the lower bound of the relative size.\nMix the color with given opacity\nMix the color with given opacity\nCreate a new font\nMake the value a relative size of percentage of minimal of …\nMake the value a relative size of percentage of minimal of …\nMake the value a relative size of percentage of height\nMake the value a relative size of percentage of height\nMake the value a relative size of percentage of width\nMake the value a relative size of percentage of width\nReturns a color from the palette\nReturns a color from the palette\nPick a color from the palette\nSets the anchor position.\nThe anchor point position\nCreate a new font desc with the same font but different …\nConvert the RGB representation to the standard RGB tuple\nConvert the RGB representation to the standard RGB tuple\nMake a shape style with stroke width from a color\nMake a shape style with stroke width from a color\nReturns the stroke width.\nReturns a new style with the same color and the specified …\nStroke width.\nSet the style of the font\nText anchor attributes are used to properly position the …\nNormalize this color representation to the backend color\nConvert the color into the RGBA color which is internally …\nConvert the color into the RGBA color which is internally …\nTransform the coordinate to perform the rotation\nSet the font transformation\nSets the font transformation of the style.\nSpecifies the position of the text anchor relative to the …\nSpecifies the position of the text anchor relative to the …\nSpecifies the color of the text element\nSpecifies the color of the text element\nBlack (■ <em>rgb = (0, 0, 0)</em>)\nBlue (■ <em>rgb = (0, 0, 255)</em>)\nCyan (■ <em>rgb = (0, 255, 255)</em>)\nGreen (■ <em>rgb = (0, 255, 0)</em>)\nMagenta (■ <em>rgb = (255, 0, 255)</em>)\nRed (■ <em>rgb = (255, 0, 0)</em>)\nTransparent (■ <em>rgba = (0, 0, 0, 0.0)</em>)\nWhite (■ <em>rgb = (255, 255, 255)</em>)\nYellow (■ <em>rgb = (255, 255, 0)</em>)\nAnchor point is on the bottom of the text\nAnchor point is in the horizontal center of the text\nAnchor point is in the vertical center of the text\nThe horizontal position of the anchor point relative to …\nAnchor point is on the left side of the text\nThe text anchor position.\nAnchor point is on the right side of the text\nAnchor point is on the top of the text\nThe vertical position of the anchor point relative to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe horizontal position of the anchor point\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new text anchor position.\nThe vertical position of the anchor point")