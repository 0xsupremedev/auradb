searchState.loadedDescShard("oorandom", 0, "A tiny, robust PRNG implementation.\nThe default value for <code>increment</code>. This is basically …\nThe default value for <code>increment</code>.\nA PRNG producing a 32-bit output.\nA PRNG producing a 64-bit output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new PRNG from a saved state from <code>Rand32::state()</code>.\nCreates a new PRNG from a saved state from <code>Rand32::state()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new PRNG with the given seed and a default …\nCreates a new PRNG with the given seed and a default …\nCreates a new PRNG.  The two inputs, <code>seed</code> and <code>increment</code>, …\nSame as <code>Rand32::new_inc()</code>\nProduces a random <code>f32</code> in the range <code>[0.0, 1.0)</code>.\nProduces a random <code>f64</code> in the range <code>[0.0, 1.0)</code>.\nProduces a random <code>i32</code> in the range <code>[i32::MIN, i32::MAX]</code>.\nProduces a random <code>i64</code> in the range <code>[i64::MIN, i64::MAX]</code>.\nProduces a random within the given bounds.  Like any <code>Range</code>,\nProduces a random within the given bounds.  Like any <code>Range</code>,\nProduces a random <code>u32</code> in the range <code>[0, u32::MAX]</code>.\nProduces a random <code>u64</code> in the range<code>[0, u64::MAX]</code>.\nReturns the internal state of the PRNG.  This allows you …\nReturns the internal state of the PRNG.  This allows you …")